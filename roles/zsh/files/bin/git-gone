#!/usr/bin/env bb
;; -*- mode: clojure; -*-

(ns util
  (:require
    [clojure.java.shell :as shell]
    [clojure.string :as str]))


(defn sh
  [& args]
  (println "+" (str/join " " args))
  (let [{:keys [exit out err]} (apply shell/sh args)]
    (if (not= 0 exit) (throw (Exception. err)) :ok)
    (println out)
    out))


(defn peco
  [{:keys [prompt]} input]
  (if (seq input)
    (let [{:keys [exit out err]} (shell/sh "peco" "--prompt" prompt :in (str/join "\n" input))]
      (if (not= 0 exit) (throw (Exception. err)) :ok)
      (filter #(not= "" %) (str/split-lines out)))
    []))


(ns git
  (:require
    [clojure.string :as str]
    [util]))


(defn branch-
  ([branch] {:branch branch :remote nil})
  ([branch remote] {:branch branch :remote remote}))


(defn branch-from-str
  [s]
  (let [[fst snd] (str/split s #"/" 2)]
    (if (nil? snd)
      (branch- fst)
      (branch- snd fst))))


(defn branch-to-str
  [{:keys [branch remote]}]
  (if (nil? remote)
    branch
    (str remote "/" branch)))


(defn current-upstream-branch
  []
  (if-let [line (first (str/split-lines (util/sh "sh"
                                                 "-c"
                                                 "git rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null || true")))]
    (branch-from-str line)
    nil))


(defn local-merged-branches
  []
  (->> (util/sh "git" "branch" "--merged")
       (str/split-lines)
       (filter (fn [line]
                 (and (not (str/starts-with? line "*"))
                      (not (str/ends-with? line " main"))
                      (not (str/ends-with? line " master"))
                      (not (str/ends-with? line " develop")))))
       (map str/triml)
       (map #(branch- %))))


(defn local-force-removable-branches
  []
  (->> (util/sh "git" "branch" "-vv")
       (str/split-lines)
       (filter (fn [line]
                 (and (not (str/starts-with? line "*"))
                      (not (str/includes? line " main "))
                      (not (str/includes? line " master "))
                      (not (str/includes? line " develop "))
                      (str/includes? line ": gone]"))))
       (map str/triml)
       (util/peco {:prompt "LOCAL>"})
       (map #(branch- (first (str/split % #"\s+"))))))


(defn remote-force-removable-branches
  []
  (let [current-upstream-br (current-upstream-branch)]
    (->> (util/sh "git" "branch" "-r" "--merged")
         (str/split-lines)
         (filter (fn [line]
                   (and (not (str/includes? line "/HEAD "))
                        (not (str/ends-with? line "/main"))
                        (not (str/ends-with? line "/master"))
                        (not (str/ends-with? line "/develop"))
                        (if current-upstream-br
                          (not (str/ends-with? line (branch-to-str current-upstream-br)))
                          true))))
         (map str/triml)
         (util/peco {:prompt "REMOTE>"})
         (map #(branch-from-str (first (str/split % #"\s+")))))))


(defn delete-branch
  [{:keys [branch remote]}]
  (if (nil? remote)
    (util/sh "git" "branch" "-d" branch)
    ""))


(defn delete-branch-force
  [{:keys [branch remote]}]
  (if (nil? remote)
    (util/sh "git" "branch" "-D" branch)
    (util/sh "git" "push" "-d" remote branch)))


(ns user
  (:require
    [git]
    [util]))


(defn delete-local-merged-branches
  []
  (doseq [branch (git/local-merged-branches)]
    (git/delete-branch branch)))


(defn delete-local-branches-interactively
  []
  (doseq [branch (git/local-force-removable-branches)]
    (git/delete-branch-force branch)))


(defn delete-remote-branches-interactively
  []
  (doseq [branch (git/remote-force-removable-branches)]
    (git/delete-branch-force branch)))


(defn -main
  []
  (delete-local-merged-branches)
  (delete-local-branches-interactively)
  (delete-remote-branches-interactively)
  (util/sh "git" "gc" "--auto" "--prune"))


(-main)
