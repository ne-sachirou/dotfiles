#!/usr/bin/env runghc

import System.Environment ( getArgs )
import System.FilePath ( takeBaseName )
import System.IO ( hGetLine, hIsEOF )
import System.Posix.Directory ( getWorkingDirectory )
import System.Process ( createProcess, shell, StdStream ( CreatePipe ), std_out )
import Text.Printf ( printf )

main :: IO ()
main = do
  args <- getArgs
  case args of
    host:remoteDir:_ -> deploy host remoteDir
    _ -> help

help :: IO ()
help = putStr $ unlines [ "Help: deploy HOST REMOTE_DIR" ]

deploy :: String -> String -> IO ()
deploy host remoteDir = do
  projectName <- fmap takeBaseName getWorkingDirectory
  _ <- sh $ printf "git archive -9 -o /tmp/%s.tar.gz --prefix %s/ HEAD" projectName projectName
  _ <- sh $ printf "scp /tmp/%s.tar.gz %s:%s/%s.tar.gz" projectName host remoteDir projectName
  _ <- sh $ unlines
    [printf "ssh %s -K 'bash -s' <<EOF" host,
     printf "cd %s" remoteDir,
     printf "tar xzf %s.tar.gz" projectName,
     "EOF"]
  return ()

sh :: String -> IO [String]
sh command = do
  putStrLn $ "+ " ++ command
  (_, Just hout, _, _) <- createProcess (shell command) { std_out = CreatePipe }
  streamOut hout []
  where
    streamOut hout out = do
      isEof <- hIsEOF hout
      if isEof
        then return $ reverse out
        else do
          line <- hGetLine hout
          putStrLn line
          streamOut hout (line:out)

-- vim:set ft=haskell:
