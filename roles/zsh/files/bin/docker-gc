#!/usr/bin/env bb
; -*- mode: clojure; -*-

(defn sh
  [& args]
  (println "+" (str/join " " args))
  (let [{:keys [exit out err]} (apply shell/sh args)]
    (if (not= 0 exit) (throw (Exception. err)))
    (println out)
    out))


; docker image ls | tail -n +2 | awk '{print $1 ":" $2}' | xargs -t -I{} docker pull {}
(defn update-images
  []
  (doseq [image (map #(str/join ":" (take 2 (str/split % #"\s+")))
                     (filter (fn [line]
                               (and (not (str/includes? line "<none>"))
                                    (not (str/starts-with? line "k8s.gcr.io/"))
                                    (not (str/starts-with? line "docker/"))))
                             (drop 1 (str/split-lines (sh "docker" "image" "ls")))))]
    (try
      (sh "docker" "pull" image)
      (catch Exception err (println (.getMessage err))))))


(defn -main
  []
  (sh "docker" "system" "prune" "-f" "--volumes")
  (update-images)
  (sh "docker" "image" "prune" "-af" "--filter" "until=2160h")
  (sh "docker" "run" "--rm" "--privileged" "alpine:latest" "hwclock" "-s"))


(-main)
