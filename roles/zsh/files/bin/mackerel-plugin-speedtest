#!/usr/bin/env bb
;; -*- mode: clojure; -*-

(ns metric
  (:require
    [clojure.string :as str]))


(defn from-str
  ""
  [expression]
  (let [[name value-str time-str] (str/split expression #"\t" 3)]
    {:name name
     :value (read-string value-str)
     :time (-> time-str read-string (* 1000) java.util.Date.)}))


(defn to-str
  ""
  [{:keys [name value time]}]
  (str/join "\t" [name value (-> time .getTime (/ 1000) Math/floor int)]))


(ns speedtest
  (:require
    [cheshire.core :as json]
    [clojure.java.shell :as shell]
    [clojure.string :as str]
    [metric]))


(def cache-filename
  "/tmp/mackerel-plugin-speedtest")


(def cache-ttl
  (* 10 60 1000))


(defn measure
  ""
  [time]
  (let [{:keys [exit out err]} (shell/sh "speedtest" "--json" "--secure")]
    (if (not= 0 exit) (throw (Exception. err)) :ok)
    (let [result (json/decode out)]
      [{:name "speedtest.speed.download" :value (/ (get result "download") 8.0) :time time}
       {:name "speedtest.speed.upload" :value (/ (get result "upload") 8.0) :time time}
       {:name "speedtest.ping.ping" :value (get result "ping") :time time}])))


(defn read-cache
  ""
  []
  (try
    (->> cache-filename slurp str/split-lines (filter #(not= "" %)) (map metric/from-str))
    (catch java.io.FileNotFoundException _err
      [])))


(defn write-cache
  ""
  [metrics]
  (->> metrics (map metric/to-str) (str/join "\n") (spit cache-filename)))


(defn measure-with-cache
  ""
  [time]
  (let [prev-metrics (read-cache)]
    (if (or (empty? prev-metrics)
            (> (.getTime time) (+ (-> prev-metrics first :time .getTime) cache-ttl)))
      (let [metrics (measure time)]
        (write-cache metrics)
        metrics)
      (map #(assoc % :time time) prev-metrics))))


(ns user
  (:require
    [metric]
    [speedtest]))


(defn print-meta
  ""
  []
  (println "# mackerel-agent-plugin")
  (println (json/encode {:graphs {:speedtest.speed {:label "Speedtest"
                                                    :unit "bytes"
                                                    :metrics [{:name "download" :label "download"}
                                                              {:name "upload" :label "upload"}]}
                                  :speedtest.ping {:label "Speedtest Ping"
                                                   :unit "float" ; seconds
                                                   :metrics [{:name "ping" :label "ping"}]}}})))


(defn print-metrics
  ""
  []
  (let [time (java.util.Date.)
        metrics (speedtest/measure-with-cache time)]
    (doseq [metric metrics]
      (println (metric/to-str metric)))))


(if (= "1" (System/getenv "MACKEREL_AGENT_PLUGIN_META"))
  (print-meta)
  (print-metrics))
